/** * # Terragrunt Configuration for Azure Resources *  * This Terragrunt configuration centralizes Azure provider and backend settings for all * Azure resources in the development environment. It implements consistent configuration * across modules and dynamically generates provider configuration based on environment- * specific variables. * * ## Features * - Loads environment-specific variables from YAML file * - Generates consistent Azure provider configuration * - Configures Azure Storage backend for remote state * - Ensures consistent authentication across all modules */# Read environment variables from YAML filelocals {    env_vars = yamldecode(file("environment_vars.yaml"))}# Provider generator function - creates provider.tf in each module directorygenerate "provider" {    path = "provider.tf"    contents = <<EOF    terraform {        required_providers {            azurerm = {                source = "hashicorp/azurerm"                version = "~> 3.0"  # Azure Provider version 3.x            }        }        backend "azurerm" {}  # Empty config to be filled by Terragrunt    }        provider "azurerm" {        features {}  # Required features block        subscription_id = "${local.env_vars.subscription}"        tenant_id = "${local.env_vars.tenant_id}"    }    EOF}# Remote state configuration for Azure Storage backendremote_state {    backend = "azurerm"    config = {        resource_group_name  = "terraform-state-${local.env_vars.environment}"        storage_account_name = "tfstate${local.env_vars.environment}"        container_name       = "terraform-state"        key                  = "${path_relative_to_include()}/terraform.tfstate"    }    generate = {        path = "backend.tf"        if_exists = "overwrite"  # Always update the backend config    }}s