/** * # Terragrunt Configuration for AWS Resources *  * This Terragrunt configuration centralizes AWS provider and backend settings for all * AWS resources in the development environment. It dynamically generates provider * configuration based on environment variables and implements the DRY (Don't Repeat * Yourself) principle across multiple Terraform modules. * * ## Features * - Dynamically generates provider configurations * - Centralizes backend configuration for S3 state storage * - Uses environment-specific variables for region settings * - Implements consistent configuration across all AWS modules */# Provider generator function - creates provider.tf in each module directorygenerate "provider" {    path = "provider.tf"    if_exists = "overwrite"  # Always update the provider config    contents = <<EOF    terraform {        required_providers {            aws = {                source = "hashicorp/aws"                version = "~>5.0"  # AWS Provider version 5.x            }        }        backend "s3" {}  # Empty config to be filled by Terragrunt    }    provider "aws" {        region = "${local.env_vars.region}"  # Region from environment variables    }    EOF}# Read environment variables from YAML filelocals {    env_vars = yamldecode(file("${get_terragrunt_dir()}/environment_vars.yaml"))}# Remote state configuration for S3 backendremote_state {    backend = "s3"    config = {        bucket  = "terraform-state-${local.env_vars.environment}"        key     = "${path_relative_to_include()}/terraform.tfstate"        region  = "${local.env_vars.region}"        encrypt = true        dynamodb_table = "terraform-locks-${local.env_vars.environment}"    }    generate = {        path = "backend.tf"        if_exists = "overwrite"  # Always update the backend config    }}
